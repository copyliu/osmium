<?php
/* Osmium
 * Copyright (C) 2015 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Osmium\Fit;

/**
 * Export a loadout to a SVG document that can be embedded on another
 * webpage.
 */
function export_to_svg($fit, $embedclf = true){
	$d = new \Osmium\DOM\RawPage();
	$root = \Osmium\get_absolute_root();

	$d->registerCustomAttribute(
		'o-rel-xhref',
		function(\Osmium\DOM\Element $e, $v, \Osmium\DOM\RenderContext $ctx) use($root) {
			$e->setAttribute('x:href', $root.$v);
		}
	);

	$d->registerCustomElement(
		'o-sprite',
		function(\Osmium\DOM\Element $e, \Osmium\DOM\RenderContext $ctx) {
			$d = $e->ownerDocument;
			$svg = $d->createElement('svg');
			$svg->appendChild($image = $d->createElement('image'));

			$i = 0;
			while($i < $e->attributes->length) {
				$attr = $e->attributes->item($i);

				if(in_array($attr->name, [ 'spx', 'spy', 'gridwidth', 'gridheight' ], true)) {
					${$attr->name} = $attr->value;
					++$i;
					continue;
				}

				/* o-sprite attributes go to the <svg> element (most important: width, height) */
				$svg->setAttributeNode($attr);
			}

			if(!isset($spx) || !isset($spy) || (!isset($gridwidth) && !isset($gridheight))) {
				throw new \Exception('not enough parameters: need spx, spy and at least gridwidth or gridheight.');
			}

			if(!isset($gridwidth)) $gridwidth = $gridheight;
			if(!isset($gridheight)) $gridheight = $gridwidth;

			$image->setAttribute('o-rel-xhref', '/static-'.\Osmium\STATICVER.'/icons/sprite.png');
			$image->setAttribute('x', '0');
			$image->setAttribute('y', '0');
			$image->setAttribute('width', '1024');
			$image->setAttribute('height', '1024');
			$svg->setAttribute('viewBox', implode(' ', [
				$spy * $gridwidth,
				$spx * $gridheight,
				$gridwidth,
				$gridheight,
			]));

			/* o-sprite children to in the <image> element (most important: title) */
			while($e->firstChild) {
				$c = $e->firstChild;
				$e->removeChild($c);
				$image->appendChild($c);
			}

			return $svg;
		}
	);

	/* XXX: does this need escaping? */
	$d->appendChild($d->createProcessingInstruction(
		'xml-stylesheet',
		'type="text/css" href="'.$root.'/static-'.\Osmium\CSS_STATICVER.'/svgl.css"'
	));

	$d->appendChild($svg = $d->element('svg', [
		'xmlns' => 'http://www.w3.org/2000/svg',
		'xmlns:x' => 'http://www.w3.org/1999/xlink',
		'width' => '40em',
		'height' => '25em',
		'viewBox' => '0 0 40 25',
	]));
	$svg->appendCreate(
		'title',
		isset($fit['ship']['typename']) ? $fit['ship']['typename'].' loadout' : 'Loadout'
	);
	$svg->appendCreate(
		'desc',
		'Generated by Osmium '
		.\Osmium\get_osmium_version()
		.".\n\n"
		.$root
		.($embedclf ? "\n\n".export_to_gzclf($fit) : "\n")
	);

	$g = $svg->appendCreate('g#bg');

	$g->appendCreate('image', [
		'x:href' => '//'.\Osmium\EVE_IEC.'/Render/'.$fit['ship']['typeid'].'_512.png',
		'x' => '0',
		'y' => '-7.5',
		'width' => '40',
		'height' => '40',
	]);

	$g->appendCreate('rect', [
		'x' => '0',
		'y' => '0',
		'width' => '40',
		'height' => '25',
	]);

	$g->appendCreate('a', [
		'o-rel-xhref' => '',
		'target' => '_top',
	])->appendCreate('image#logo', [
		'o-rel-xhref' => '/static-'.\Osmium\STATICVER.'/favicon.png',
		'x' => '37.5',
		'y' => '4.75',
		'width' => '2',
		'height' => '2',
	])->appendCreate('title', 'Visit the '.\Osmium\get_ini_setting('name').' main page');
	
	$g = svg_gen_header($fit, $d);
	$g->setAttribute('transform', 'translate(.5 .5)');
	$svg->append($g);

	$g = svg_gen_modules($fit, $d);
	$g->setAttribute('transform', 'translate(.5 6)');
	$svg->append($g);
	
	$g = svg_gen_other($fit, $d);
	$g->setAttribute('transform', 'translate(.5 17.5)');
	$svg->append($g);
	
	$g = svg_gen_attributes($fit, $d);
	$g->setAttribute('transform', 'translate(39.5 1.25)');
	$svg->append($g);
	

	$d->finalize(new \Osmium\DOM\RenderContext());
	return $d->saveXML();
}

/** @internal */
function svg_gen_header($fit, \Osmium\DOM\Document $d) {
	$g = $d->createElement('g');
	$g->setAttribute('id', 'head');

	$a = $g->appendCreate('a#ship', [
		'target' => '_top',
		'o-rel-xhref' => '/db/type/'.$fit['ship']['typeid'],
	]);

	$a->appendCreate('image', [
		'x:href' => '//'.\Osmium\EVE_IEC.'/Render/'.$fit['ship']['typeid'].'_512.png',
		'x' => '0',
		'y' => '0',
		'width' => '5',
		'height' => '5',
	]);

	$a->appendCreate('rect', [
		'x' => '0',
		'y' => '4.2',
		'width' => '5',
		'height' => '.8',
	]);

	$a->appendCreate('text', [
		'x' => '2.5',
		'y' => '4.9',
		$fit['ship']['typename'],
	]);

	$g->appendCreate('text#title', [
		'x' => '5.5',
		'y' => '1.5',
	])->append($fit['metadata']['name']);

	$grp = $g->appendCreate('text#group', [
		'x' => '5.5',
		'y' => '3',
	])->append(get_groupname(get_groupid($fit['ship']['typeid'])));

	if(isset($ship['mode']['typeid'])) {
		$grp->append([ ' (', $ship['mode']['typename'], ')' ]);
	}

	$a = $g->appendCreate('a', [ 'target' => '_top', ]);
	$a->appendCreate('text', [
		'x' => '5.5',
		'y' => '4.2',
		'See this loadout on '.\Osmium\get_ini_setting('name'),
	]);

	if($_GET['source_fmt'] === 'uri') {
		$a->setAttribute('x:href', $_GET['input']);
	} else if(isset($fit['metadata']['loadoutid'])) {
		$a->setAttribute('o-rel-xhref', '/'.get_fit_uri(
			$fit['metadata']['loadoutid'],
			$fit['metadata']['visibility'],
			$fit['metadata']['privatetoken']
		));
	} else {
		$a->setAttribute('o-rel-xhref', '/loadout/dna/'.export_to_dna($fit));
	}

	return $g;
}

/** @internal */
function svg_gen_modules($fit, \Osmium\DOM\Document $d) {
	$mg = $d->createElement('g');
	$mg->setAttribute('id', 'modules');

	$stypes = get_slottypes();
	$states = get_state_names();

	$r = 1.75; /* Radius of a "module circle" */
	$padding = .5; /* Space between "module circles" */
	$inc = $padding + 2 * $r; /* Distance between two centers on a same row */
	$typeiconratio = 1.75; /* How big should module icons be */
	
	foreach([ 'high', 'medium', 'low' ] as $i => $type) {
		$tg = $mg->appendCreate('g.module', [
			'id' => $type,
			'transform' => 'translate('.(($i % 2) ? (.5 * $inc) : 0).' '.($i * $inc * .9).')',
		]);

		$z = 0;
		$available = \Osmium\Dogma\get_ship_attribute($fit, $stypes[$type][3]);
		$makecont = function() use(&$tg, &$z, $r, $inc) {
			$g = $tg->appendCreate('g.module', [
				'transform' => 'translate('.($inc * ($z++)).' 0)',
			]);
			$g->appendCreate('circle', [
				'cx' => (string)$r,
				'cy' => (string)$r,
				'r' => (string)$r,
			]);
			return $g;
		};

		foreach($fit['modules'][$type] as $idx => $m) {
			$g = $makecont();

			$a = $g->appendCreate('a', [
				'o-rel-xhref' => '/db/type/'.$m['typeid'],
				'target' => '_top',
			]);

			$a->appendCreate('image.m', [
				'x:href' => '//'.\Osmium\EVE_IEC.'/Type/'.$m['typeid'].'_64.png',
				'width' => (string)($typeiconratio * $r),
				'height' => (string)($typeiconratio * $r),
				'x' => (string)((2 - $typeiconratio) * .5 * $r),
				'y' => (string)((2 - $typeiconratio) * .5 * $r),
			]);

			$title = $a->appendCreate('title', $m['typename']);
			$ia = \Osmium\Chrome\format_long_range(get_module_interesting_attributes($fit, $type, $idx));
			if($ia) $title->append("\n".$ia);

			if(isset($fit['charges'][$type][$idx])) {
				$c = $fit['charges'][$type][$idx];

				$a = $g->appendCreate('a', [
					'o-rel-xhref' => '/db/type/'.$c['typeid'],
					'target' => '_top',
				]);

				$a->appendCreate('image.c', [
					'x:href' => '//'.\Osmium\EVE_IEC.'/Type/'.$c['typeid'].'_64.png',
					'width' => (string)($typeiconratio * $r * .5),
					'height' => (string)($typeiconratio * $r * .5),
					'x' => (string)((2 - $typeiconratio) * .5 * $r + .625 * $r * $typeiconratio),
					'y' => (string)((2 - $typeiconratio) * .5 * $r + .625 * $r * $typeiconratio),
				]);

				$a->appendCreate('title', $c['typename']);
			}

			list($activable,) = get_module_states($fit, $m['typeid']);
			if(!(($activable && $m['state'] === STATE_ACTIVE) || $m['state'] == STATE_ONLINE)) {
				$g->appendCreate('o-sprite', [
					'width' => (string)($typeiconratio * $r * .5),
					'height' => (string)($typeiconratio * $r * .5),
					'x' => (string)((2 - $typeiconratio) * .5 * $r - .125 * $r * $typeiconratio),
					'y' => (string)((2 - $typeiconratio) * .5 * $r + .625 * $r * $typeiconratio),
					'spx' => $states[$m['state']][1][0],
					'spy' => $states[$m['state']][1][1],
					'gridwidth' => $states[$m['state']][1][2],
					'gridheight' => $states[$m['state']][1][3],
				])->appendCreate('title', $states[$m['state']][0]);
			}
		}

		while($z < 8) {
			$g = $makecont();

			if($z > $available) {
				$g->addClass('nd');
			} else {
				$g->appendCreate('o-sprite', [
					'width' => (string)($typeiconratio * $r),
					'height' => (string)($typeiconratio * $r),
					'x' => (string)((2 - $typeiconratio) * .5 * $r),
					'y' => (string)((2 - $typeiconratio) * .5 * $r),
					'spx' => $stypes[$type][1][0],
					'spy' => $stypes[$type][1][1],
					'gridwidth' => $stypes[$type][1][2],
					'gridheight' => $stypes[$type][1][3],
				])->appendCreate('title', 'Unused '.$type.' slot');
			}
		}
	}

	return $mg;
}

/** @internal */
function svg_gen_other($fit, \Osmium\DOM\Document $d) {
	$rg = $d->createElement('g');
	$rg->setAttribute('id', 'other');

	$z = 0;
	$max = 20;
	$side = 3;
	$rows = 10;
	$padding = .5;
	
	$sinfo = get_slottypes();
	$avrigs = \Osmium\Dogma\get_ship_attribute($fit, $sinfo['rig'][3]);
	$avsubs = \Osmium\Dogma\get_ship_attribute($fit, $sinfo['subsystem'][3]);
	
	$required = count($fit['implants']) + $avrigs + $avsubs;
	foreach($fit['drones'] as $drone) {
		$required += $drone['quantityinspace'];
	}
	
	$inc = $side + $padding;
	
	$makecont = function() use(&$d, &$rg, &$z, $side, $inc, $rows, $max, $required) {
		$y = $inc * (($z - ($z % $rows)) / $rows);
		$x = $inc * ($z % $rows);
		++$z;

		$g = $d->createElement('g');
		$g->setAttribute('class', 'module');
		$g->setAttribute('transform', 'translate('.$x.' '.$y.')');
		
		$g->appendCreate('rect', [
			'width' => (string)$side,
			'height' => (string)$side,
		]);
		
		if($required > $max && $z >= $max) {
			if($z === $max) {
				$rg->append($g);

				$g->addClass('more');
				$g->appendCreate('text.c', [
					'x' => (string)($side * .5),
					'y' => (string)($side * .5),
					(string)($required - $max),
				]);
				$g->appendCreate('text.m', [
					'x' => (string)($side * .5),
					'y' => (string)($side * .8),
					'more…',
				]);

				$g = $d->createElement('g');
			}
			
			return $g;
		}
		
		$rg->append($g);
		return $g;
	};

	$rigcount = 0;
	foreach($fit['modules']['rig'] as $m) {
		$g = $makecont();
		++$rigcount;

		$a = $g->appendCreate('a', [
			'o-rel-xhref' => '/db/type/'.$m['typeid'],
			'target' => '_top',
		]);

		$a->appendCreate('image.m', [
			'x:href' => '//'.\Osmium\EVE_IEC.'/Type/'.$m['typeid'].'_64.png',
			'width' => (string)$side,
			'height' => (string)$side,
		]);

		$a->appendCreate('title', $m['typename']);
	}

	while($rigcount < $avrigs) {
		$g = $makecont();
		++$rigcount;

		$g->appendCreate('o-sprite', [
			'width' => (string)$side,
			'height' => (string)$side,
			'spx' => $sinfo['rig'][1][0],
			'spy' => $sinfo['rig'][1][1],
			'gridwidth' => $sinfo['rig'][1][2],
			'gridheight' => $sinfo['rig'][1][3],
		])->appendCreate('title', 'Unused rig slot');
	}

	$subcount = 0;
	foreach(isset($fit['modules']['subsystem']) ? $fit['modules']['subsystem'] : [] as $m) {
		$g = $makecont();
		++$subcount;

		$a = $g->appendCreate('a', [
			'o-rel-xhref' => '/db/type/'.$m['typeid'],
			'target' => '_top',
		]);

		$a->appendCreate('image.m', [
			'x:href' => '//'.\Osmium\EVE_IEC.'/Type/'.$m['typeid'].'_64.png',
			'width' => (string)$side,
			'height' => (string)$side,
		]);

		$a->appendCreate('title', $m['typename']);
	}

	while($subcount < $avsubs) {
		$g = $makecont();
		++$subcount;
		
		$g->appendCreate('o-sprite', [
			'width' => (string)$side,
			'height' => (string)$side,
			'spx' => $sinfo['subsystem'][1][0],
			'spy' => $sinfo['subsystem'][1][1],
			'gridwidth' => $sinfo['subsystem'][1][2],
			'gridheight' => $sinfo['subsystem'][1][3],
		])->appendCreate('title', 'Unused subsystem slot, this loadout is broken!');
	}

	foreach($fit['drones'] as $typeid => $drone) {
		for($i = 0; $i < $drone['quantityinspace']; ++$i) {
			$g = $makecont();

			$a = $g->appendCreate('a', [
				'o-rel-xhref' => '/db/type/'.$typeid,
				'target' => '_top',
			]);

			$a->appendCreate('image.m', [
				'x:href' => '//'.\Osmium\EVE_IEC.'/Type/'.$typeid.'_64.png',
				'width' => (string)$side,
				'height' => (string)$side,
			]);

			$title = $a->appendCreate('title', $drone['typename']);
			$ia = \Osmium\Chrome\format_long_range(get_drone_interesting_attributes($fit, $typeid));
			if($ia) $title->append("\n".$ia);
		}
	}
	
	foreach($fit['implants'] as $i) {
		$g = $makecont();

		$a = $g->appendCreate('a', [
			'o-rel-xhref' => '/db/type/'.$i['typeid'],
			'target' => '_top',
		]);

		$a->appendCreate('image.m', [
			'x:href' => '//'.\Osmium\EVE_IEC.'/Type/'.$i['typeid'].'_64.png',
			'width' => (string)$side,
			'height' => (string)$side,
		]);

		$a->appendCreate('title', $i['typename']);
	}

	while($z < $max) {
		$makecont()->addClass('nd');
	}
	
	return $rg;
}

/** @internal */
function svg_gen_attributes($fit, \Osmium\DOM\Document $d) {
	$ag = $d->createElement('g');
	$ag->setAttribute('id', 'attributes');

	$ia = get_interesting_attributes($fit);
	$dps = get_damage_all($fit, $ia)[0];

	$ehp = get_ehp_and_resists(
		$fit, [ 'em' => .25, 'explosive' => .25, 'kinetic' => .25, 'thermal' => .25, ]
	);

	$cap = get_capacitor_stability($fit);

	$tpsr = 0;
	$tpss = 0;
	foreach(get_tank($fit, $ehp, $cap['delta']) as $t) {
		$tpsr += $t[0];
		$tpss += $t[1];
	}

	$missing = [];
	$price = array_sum(get_estimated_price($fit, $missing));
	if($missing !== []) $price = 'N/A';

	$t = $ag->appendCreate('text');
	$t->appendCreate('tspan.v', (string)$d->formatKMB($dps, 2));
	$t->append(' ');
	$t->appendCreate('tspan.l', 'DPS');
	$t->appendCreate('title', 'Damage per second');

	$t = $ag->appendCreate('text', [ 'y' => '1', ]);
	$t->appendCreate('tspan.v', (string)$d->formatKMB($ehp['ehp']['avg'], 2, 'k'));
	$t->append(' ');
	$t->appendCreate('tspan.l', 'EHP');
	$t->appendCreate('title', 'Effective hitpoints (uniform damage type)');

	if(abs($tpsr - $tpss) < .001) {
		$tps = (string)$d->formatKMB(1000 * $tpsr, 2);
		$title = 'Tank (sustained in EHP/s)';
	} else {
		$tps = $d->formatKMB(1000 * $tpsr, 2).'|'.$d->formatKMB(1000 * $tpss, 2);
		$title = 'Tank (reinforced|sustained in EHP/s)';
	}
	$t = $ag->appendCreate('text', [ 'y' => '2' ]);
	$t->appendCreate('tspan.v', $tps);
	$t->append(' ');
	$t->appendCreate('tspan.l', 'TPS');
	$t->appendCreate('title', $title);

	$t = $ag->appendCreate('text', [ 'y' => '3', ]);
	$t->appendCreate('tspan.v', $price === 'N/A' ? $price : (string)$d->formatKMB($price, 2));
	$t->append(' ');
	$t->appendCreate('tspan.l', 'ISK');
	$t->appendCreate('title', 'Estimated price');

	return $ag;
}